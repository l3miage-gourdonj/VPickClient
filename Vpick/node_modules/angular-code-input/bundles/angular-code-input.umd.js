(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular-code-input', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['angular-code-input'] = {}, global.ng.core, global.ng.common));
}(this, (function (exports, core, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var CodeInputComponentConfigToken = new core.InjectionToken('CodeInputComponentConfig');
    var defaultComponentConfig = {
        codeLength: 4,
        inputType: 'tel',
        initialFocusField: undefined,
        isCharsCode: false,
        isCodeHidden: false,
        isPrevFocusableAfterClearing: true,
        isFocusingOnLastByClickIfFilled: false,
        code: undefined,
        disabled: false,
        autocapitalize: undefined
    };

    var InputState;
    (function (InputState) {
        InputState[InputState["ready"] = 0] = "ready";
        InputState[InputState["reset"] = 1] = "reset";
    })(InputState || (InputState = {}));
    var CodeInputComponent = /** @class */ (function () {
        function CodeInputComponent(config) {
            /** @deprecated Use isCharsCode prop instead. */
            this.isNonDigitsCode = false;
            this.codeChanged = new core.EventEmitter();
            this.codeCompleted = new core.EventEmitter();
            this.placeholders = [];
            this.inputs = [];
            this.inputsStates = [];
            this.state = {
                isFocusingAfterAppearingCompleted: false,
                isInitialFocusFieldEnabled: false
            };
            Object.assign(this, defaultComponentConfig);
            if (!config) {
                return;
            }
            // filtering for only valid config props
            for (var prop in config) {
                if (!config.hasOwnProperty(prop)) {
                    continue;
                }
                if (!defaultComponentConfig.hasOwnProperty(prop)) {
                    continue;
                }
                // @ts-ignore
                this[prop] = config[prop];
            }
        }
        /**
         * Life cycle
         */
        CodeInputComponent.prototype.ngOnInit = function () {
            // defining the state
            this.state.isInitialFocusFieldEnabled = !this.isEmpty(this.initialFocusField);
            // initiating the code
            this.onCodeLengthChanges();
        };
        CodeInputComponent.prototype.ngAfterViewInit = function () {
            // initiation of the inputs
            this.inputsListSubscription = this.inputsList.changes.subscribe(this.onInputsListChanges.bind(this));
            this.onInputsListChanges(this.inputsList);
        };
        CodeInputComponent.prototype.ngAfterViewChecked = function () {
            this.focusOnInputAfterAppearing();
        };
        CodeInputComponent.prototype.ngOnChanges = function (changes) {
            if (changes.code) {
                this.onInputCodeChanges();
            }
            if (changes.codeLength) {
                this.onCodeLengthChanges();
            }
        };
        CodeInputComponent.prototype.ngOnDestroy = function () {
            if (this.inputsListSubscription) {
                this.inputsListSubscription.unsubscribe();
            }
        };
        /**
         * Methods
         */
        CodeInputComponent.prototype.reset = function (isChangesEmitting) {
            if (isChangesEmitting === void 0) { isChangesEmitting = false; }
            // resetting the code to its initial value or to an empty value
            this.onInputCodeChanges();
            if (this.state.isInitialFocusFieldEnabled) {
                // tslint:disable-next-line:no-non-null-assertion
                this.focusOnField(this.initialFocusField);
            }
            if (isChangesEmitting) {
                this.emitChanges();
            }
        };
        CodeInputComponent.prototype.focusOnField = function (index) {
            if (index >= this._codeLength) {
                throw new Error('The index of the focusing input box should be less than the codeLength.');
            }
            this.inputs[index].focus();
        };
        CodeInputComponent.prototype.onClick = function (e) {
            // handle click events only if the the prop is enabled
            if (!this.isFocusingOnLastByClickIfFilled) {
                return;
            }
            var target = e.target;
            var last = this.inputs[this._codeLength - 1];
            // already focused
            if (target === last) {
                return;
            }
            // check filling
            var isFilled = this.getCurrentFilledCode().length >= this._codeLength;
            if (!isFilled) {
                return;
            }
            // focusing on the last input if is filled
            setTimeout(function () { return last.focus(); });
        };
        CodeInputComponent.prototype.onInput = function (e, i) {
            var target = e.target;
            var value = e.data || target.value;
            if (this.isEmpty(value)) {
                return;
            }
            // only digits are allowed if isCharsCode flag is absent/false
            if (!this.canInputValue(value)) {
                e.preventDefault();
                e.stopPropagation();
                this.setInputValue(target, null);
                this.setStateForInput(target, InputState.reset);
                return;
            }
            var values = value.toString().trim().split('');
            for (var j = 0; j < values.length; j++) {
                var index = j + i;
                if (index > this._codeLength - 1) {
                    break;
                }
                this.setInputValue(this.inputs[index], values[j]);
            }
            this.emitChanges();
            var next = i + values.length;
            if (next > this._codeLength - 1) {
                target.blur();
                return;
            }
            this.inputs[next].focus();
        };
        CodeInputComponent.prototype.onPaste = function (e, i) {
            e.preventDefault();
            e.stopPropagation();
            var data = e.clipboardData ? e.clipboardData.getData('text').trim() : undefined;
            if (this.isEmpty(data)) {
                return;
            }
            // Convert paste text into iterable
            // tslint:disable-next-line:no-non-null-assertion
            var values = data.split('');
            var valIndex = 0;
            for (var j = i; j < this.inputs.length; j++) {
                // The values end is reached. Loop exit
                if (valIndex === values.length) {
                    break;
                }
                var input = this.inputs[j];
                var val = values[valIndex];
                // Cancel the loop when a value cannot be used
                if (!this.canInputValue(val)) {
                    this.setInputValue(input, null);
                    this.setStateForInput(input, InputState.reset);
                    return;
                }
                this.setInputValue(input, val.toString());
                valIndex++;
            }
            this.inputs[i].blur();
            this.emitChanges();
        };
        CodeInputComponent.prototype.onKeydown = function (e, i) {
            return __awaiter(this, void 0, void 0, function () {
                var target, isTargetEmpty, prev, isBackspaceKey, isDeleteKey;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            target = e.target;
                            isTargetEmpty = this.isEmpty(target.value);
                            prev = i - 1;
                            return [4 /*yield*/, this.isBackspaceKey(e)];
                        case 1:
                            isBackspaceKey = _a.sent();
                            isDeleteKey = this.isDeleteKey(e);
                            if (!isBackspaceKey && !isDeleteKey) {
                                return [2 /*return*/];
                            }
                            e.preventDefault();
                            this.setInputValue(target, null);
                            if (!isTargetEmpty) {
                                this.emitChanges();
                            }
                            // preventing to focusing on the previous field if it does not exist or the delete key has been pressed
                            if (prev < 0 || isDeleteKey) {
                                return [2 /*return*/];
                            }
                            if (isTargetEmpty || this.isPrevFocusableAfterClearing) {
                                this.inputs[prev].focus();
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        CodeInputComponent.prototype.onInputCodeChanges = function () {
            var e_1, _a;
            var _this = this;
            if (!this.inputs.length) {
                return;
            }
            if (this.isEmpty(this.code)) {
                this.inputs.forEach(function (input) {
                    _this.setInputValue(input, null);
                });
                return;
            }
            // tslint:disable-next-line:no-non-null-assertion
            var chars = this.code.toString().trim().split('');
            // checking if all the values are correct
            var isAllCharsAreAllowed = true;
            try {
                for (var chars_1 = __values(chars), chars_1_1 = chars_1.next(); !chars_1_1.done; chars_1_1 = chars_1.next()) {
                    var char = chars_1_1.value;
                    if (!this.canInputValue(char)) {
                        isAllCharsAreAllowed = false;
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (chars_1_1 && !chars_1_1.done && (_a = chars_1.return)) _a.call(chars_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.inputs.forEach(function (input, index) {
                var value = isAllCharsAreAllowed ? chars[index] : null;
                _this.setInputValue(input, value);
            });
        };
        CodeInputComponent.prototype.onCodeLengthChanges = function () {
            var _a;
            if (!this.codeLength) {
                return;
            }
            this._codeLength = this.codeLength;
            if (this._codeLength > this.placeholders.length) {
                var numbers = Array(this._codeLength - this.placeholders.length).fill(1);
                (_a = this.placeholders).splice.apply(_a, __spreadArray([this.placeholders.length - 1, 0], __read(numbers)));
            }
            else if (this._codeLength < this.placeholders.length) {
                this.placeholders.splice(this._codeLength);
            }
        };
        CodeInputComponent.prototype.onInputsListChanges = function (list) {
            var _a, _b;
            var _this = this;
            if (list.length > this.inputs.length) {
                var inputsToAdd = list.filter(function (item, index) { return index > _this.inputs.length - 1; });
                (_a = this.inputs).splice.apply(_a, __spreadArray([this.inputs.length, 0], __read(inputsToAdd.map(function (item) { return item.nativeElement; }))));
                var states = Array(inputsToAdd.length).fill(InputState.ready);
                (_b = this.inputsStates).splice.apply(_b, __spreadArray([this.inputsStates.length, 0], __read(states)));
            }
            else if (list.length < this.inputs.length) {
                this.inputs.splice(list.length);
                this.inputsStates.splice(list.length);
            }
            // filling the inputs after changing of their count
            this.onInputCodeChanges();
        };
        CodeInputComponent.prototype.focusOnInputAfterAppearing = function () {
            if (!this.state.isInitialFocusFieldEnabled) {
                return;
            }
            if (this.state.isFocusingAfterAppearingCompleted) {
                return;
            }
            // tslint:disable-next-line:no-non-null-assertion
            this.focusOnField(this.initialFocusField);
            // tslint:disable-next-line:no-non-null-assertion
            this.state.isFocusingAfterAppearingCompleted = document.activeElement === this.inputs[this.initialFocusField];
        };
        CodeInputComponent.prototype.emitChanges = function () {
            var _this = this;
            setTimeout(function () { return _this.emitCode(); }, 50);
        };
        CodeInputComponent.prototype.emitCode = function () {
            var code = this.getCurrentFilledCode();
            this.codeChanged.emit(code);
            if (code.length >= this._codeLength) {
                this.codeCompleted.emit(code);
            }
        };
        CodeInputComponent.prototype.getCurrentFilledCode = function () {
            var e_2, _a;
            var code = '';
            try {
                for (var _b = __values(this.inputs), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var input = _c.value;
                    if (!this.isEmpty(input.value)) {
                        code += input.value;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return code;
        };
        CodeInputComponent.prototype.isBackspaceKey = function (e) {
            var _this = this;
            var isBackspace = (e.key && e.key.toLowerCase() === 'backspace') || (e.keyCode && e.keyCode === 8);
            if (isBackspace) {
                return Promise.resolve(true);
            }
            // process only key with placeholder keycode on android devices
            if (!e.keyCode || e.keyCode !== 229) {
                return Promise.resolve(false);
            }
            return new Promise(function (resolve) {
                setTimeout(function () {
                    var input = e.target;
                    var isReset = _this.getStateForInput(input) === InputState.reset;
                    if (isReset) {
                        _this.setStateForInput(input, InputState.ready);
                    }
                    // if backspace key pressed the caret will have position 0 (for single value field)
                    resolve(input.selectionStart === 0 && !isReset);
                });
            });
        };
        CodeInputComponent.prototype.isDeleteKey = function (e) {
            return (e.key && e.key.toLowerCase() === 'delete') || (e.keyCode && e.keyCode === 46);
        };
        CodeInputComponent.prototype.setInputValue = function (input, value) {
            var isEmpty = this.isEmpty(value);
            var valueClassCSS = 'has-value';
            var emptyClassCSS = 'empty';
            if (isEmpty) {
                input.value = '';
                input.classList.remove(valueClassCSS);
                // tslint:disable-next-line:no-non-null-assertion
                input.parentElement.classList.add(emptyClassCSS);
            }
            else {
                input.value = value;
                input.classList.add(valueClassCSS);
                // tslint:disable-next-line:no-non-null-assertion
                input.parentElement.classList.remove(emptyClassCSS);
            }
        };
        CodeInputComponent.prototype.canInputValue = function (value) {
            if (this.isEmpty(value)) {
                return false;
            }
            var isDigitsValue = /^[0-9]+$/.test(value.toString());
            return isDigitsValue || (this.isCharsCode || this.isNonDigitsCode);
        };
        CodeInputComponent.prototype.setStateForInput = function (input, state) {
            var index = this.inputs.indexOf(input);
            if (index < 0) {
                return;
            }
            this.inputsStates[index] = state;
        };
        CodeInputComponent.prototype.getStateForInput = function (input) {
            var index = this.inputs.indexOf(input);
            return this.inputsStates[index];
        };
        CodeInputComponent.prototype.isEmpty = function (value) {
            return value === null || value === undefined || !value.toString().length;
        };
        return CodeInputComponent;
    }());
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    CodeInputComponent.decorators = [
        { type: core.Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'code-input',
                    template: "<span *ngFor=\"let holder of placeholders; index as i\"\n      [class.code-hidden]=\"isCodeHidden\">\n  <input #input\n         (click)=\"onClick($event)\"\n         (paste)=\"onPaste($event, i)\"\n         (input)=\"onInput($event, i)\"\n         (keydown)=\"onKeydown($event, i)\"\n         [type]=\"inputType\"\n         [disabled]=\"disabled\"\n         [attr.autocapitalize]=\"autocapitalize\"\n         autocomplete=\"one-time-code\"/>\n</span>\n",
                    styles: [":host{--text-security-type:disc;--item-spacing:4px;--item-height:4.375em;--item-border:1px solid #ddd;--item-border-bottom:1px solid #ddd;--item-border-has-value:1px solid #ddd;--item-border-bottom-has-value:1px solid #ddd;--item-border-focused:1px solid #ddd;--item-border-bottom-focused:1px solid #ddd;--item-shadow-focused:0px 1px 5px #ddd;--item-border-radius:5px;--item-background:transparent;--color:#171516;display:flex;transform:translateZ(0);font-size:inherit;color:var(--color)}:host span{display:block;flex:1;padding-right:var(--item-spacing)}:host span:first-child{padding-left:var(--item-spacing)}:host span.code-hidden input{text-security:var(--text-security-type);-webkit-text-security:var(--text-security-type);-moz-text-security:var(--text-security-type)}:host input{width:100%;height:var(--item-height);color:inherit;background:var(--item-background);text-align:center;font-size:inherit;border:var(--item-border);border-bottom:var(--item-border-bottom);border-radius:var(--item-border-radius);-webkit-appearance:none;transform:translateZ(0);-webkit-transform:translateZ(0);outline:none}:host input.has-value{border:var(--item-border-has-value);border-bottom:var(--item-border-bottom-has-value)}:host input:focus{border:var(--item-border-focused);border-bottom:var(--item-border-bottom-focused);box-shadow:var(--item-shadow-focused)}"]
                },] }
    ];
    /**
     * @type {function(): !Array<(null|{
     *   type: ?,
     *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),
     * })>}
     * @nocollapse
     */
    CodeInputComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [CodeInputComponentConfigToken,] }] }
    ]; };
    /** @type {!Object<string, !Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    CodeInputComponent.propDecorators = {
        inputsList: [{ type: core.ViewChildren, args: ['input',] }],
        codeLength: [{ type: core.Input }],
        inputType: [{ type: core.Input }],
        initialFocusField: [{ type: core.Input }],
        isNonDigitsCode: [{ type: core.Input }],
        isCharsCode: [{ type: core.Input }],
        isCodeHidden: [{ type: core.Input }],
        isPrevFocusableAfterClearing: [{ type: core.Input }],
        isFocusingOnLastByClickIfFilled: [{ type: core.Input }],
        code: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        autocapitalize: [{ type: core.Input }],
        codeChanged: [{ type: core.Output }],
        codeCompleted: [{ type: core.Output }]
    };

    var CodeInputModule = /** @class */ (function () {
        function CodeInputModule() {
        }
        CodeInputModule.forRoot = function (config) {
            return {
                ngModule: CodeInputModule,
                providers: [
                    { provide: CodeInputComponentConfigToken, useValue: config }
                ]
            };
        };
        return CodeInputModule;
    }());
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    CodeInputModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        CodeInputComponent
                    ],
                    exports: [
                        CodeInputComponent
                    ]
                },] }
    ];

    /*
     * Public API Surface of code-input
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CodeInputComponent = CodeInputComponent;
    exports.CodeInputModule = CodeInputModule;
    exports.ɵa = CodeInputComponentConfigToken;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-code-input.umd.js.map
