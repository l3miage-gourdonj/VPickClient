{"version":3,"file":"code-input.component.d.ts","sources":["code-input.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges } from '@angular/core';\r\nimport { CodeInputComponentConfig } from './code-input.component.config';\r\nexport declare class CodeInputComponent implements AfterViewInit, OnInit, OnChanges, OnDestroy, AfterViewChecked, CodeInputComponentConfig {\r\n    inputsList: QueryList<ElementRef>;\r\n    codeLength: number;\r\n    inputType: string;\r\n    initialFocusField?: number;\r\n    /** @deprecated Use isCharsCode prop instead. */\r\n    isNonDigitsCode: boolean;\r\n    isCharsCode: boolean;\r\n    isCodeHidden: boolean;\r\n    isPrevFocusableAfterClearing: boolean;\r\n    isFocusingOnLastByClickIfFilled: boolean;\r\n    code?: string | number;\r\n    disabled: boolean;\r\n    autocapitalize?: string;\r\n    readonly codeChanged: EventEmitter<string>;\r\n    readonly codeCompleted: EventEmitter<string>;\r\n    placeholders: number[];\r\n    private inputs;\r\n    private inputsStates;\r\n    private inputsListSubscription;\r\n    private _codeLength;\r\n    private state;\r\n    constructor(config?: CodeInputComponentConfig);\r\n    /**\r\n     * Life cycle\r\n     */\r\n    ngOnInit(): void;\r\n    ngAfterViewInit(): void;\r\n    ngAfterViewChecked(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Methods\r\n     */\r\n    reset(isChangesEmitting?: boolean): void;\r\n    focusOnField(index: number): void;\r\n    onClick(e: any): void;\r\n    onInput(e: any, i: number): void;\r\n    onPaste(e: ClipboardEvent, i: number): void;\r\n    onKeydown(e: any, i: number): Promise<void>;\r\n    private onInputCodeChanges;\r\n    private onCodeLengthChanges;\r\n    private onInputsListChanges;\r\n    private focusOnInputAfterAppearing;\r\n    private emitChanges;\r\n    private emitCode;\r\n    private getCurrentFilledCode;\r\n    private isBackspaceKey;\r\n    private isDeleteKey;\r\n    private setInputValue;\r\n    private canInputValue;\r\n    private setStateForInput;\r\n    private getStateForInput;\r\n    private isEmpty;\r\n}\r\n"]}