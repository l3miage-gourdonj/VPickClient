{"version":3,"file":"angular-code-input.js","sources":["../../../angular-code-input/src/lib/code-input.component.config.ts","../../../angular-code-input/src/lib/code-input.component.ts","../../../angular-code-input/src/lib/code-input.module.ts","../../../angular-code-input/src/public-api.ts","../../../angular-code-input/src/angular-code-input.ts"],"names":[],"mappings":"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","sourcesContent":["import {InjectionToken} from '@angular/core';\r\n\r\nexport const CodeInputComponentConfigToken = new InjectionToken<CodeInputComponentConfig>('CodeInputComponentConfig');\r\n\r\nexport interface CodeInputComponentConfig {\r\n  codeLength?: number;\r\n  inputType?: string;\r\n  initialFocusField?: number;\r\n  isCharsCode?: boolean;\r\n  isCodeHidden?: boolean;\r\n  isPrevFocusableAfterClearing?: boolean;\r\n  isFocusingOnLastByClickIfFilled?: boolean;\r\n  code?: string | number;\r\n  disabled?: boolean;\r\n  autocapitalize?: string;\r\n}\r\n\r\nexport const defaultComponentConfig: CodeInputComponentConfig = {\r\n  codeLength: 4,\r\n  inputType: 'tel',\r\n  initialFocusField: undefined,\r\n  isCharsCode: false,\r\n  isCodeHidden: false,\r\n  isPrevFocusableAfterClearing: true,\r\n  isFocusingOnLastByClickIfFilled: false,\r\n  code: undefined,\r\n  disabled: false,\r\n  autocapitalize: undefined\r\n};\r\n","import {\n  AfterViewChecked,\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewChildren\n} from '@angular/core';\nimport {\n  CodeInputComponentConfig,\n  CodeInputComponentConfigToken,\n  defaultComponentConfig\n} from './code-input.component.config';\nimport { Subscription } from 'rxjs';\n\nenum InputState {\n  ready = 0,\n  reset = 1\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'code-input',\n  templateUrl: 'code-input.component.html',\n  styleUrls: ['./code-input.component.scss']\n})\nexport class CodeInputComponent implements AfterViewInit, OnInit, OnChanges, OnDestroy, AfterViewChecked, CodeInputComponentConfig {\n\n  @ViewChildren('input') inputsList !: QueryList<ElementRef>;\n\n  @Input() codeLength !: number;\n  @Input() inputType !: string;\n  @Input() initialFocusField?: number;\n  /** @deprecated Use isCharsCode prop instead. */\n  @Input() isNonDigitsCode = false;\n  @Input() isCharsCode !: boolean;\n  @Input() isCodeHidden !: boolean;\n  @Input() isPrevFocusableAfterClearing !: boolean;\n  @Input() isFocusingOnLastByClickIfFilled !: boolean;\n  @Input() code ?: string | number;\n  @Input() disabled !: boolean;\n  @Input() autocapitalize ?: string;\n\n  @Output() readonly codeChanged = new EventEmitter<string>();\n  @Output() readonly codeCompleted = new EventEmitter<string>();\n\n  public placeholders: number[] = [];\n\n  private inputs: HTMLInputElement[] = [];\n  private inputsStates: InputState[] = [];\n  private inputsListSubscription !: Subscription;\n\n  // tslint:disable-next-line:variable-name\n  private _codeLength !: number;\n  private state = {\n    isFocusingAfterAppearingCompleted: false,\n    isInitialFocusFieldEnabled: false\n  };\n\n  constructor(@Optional() @Inject(CodeInputComponentConfigToken) config?: CodeInputComponentConfig) {\n    Object.assign(this, defaultComponentConfig);\n\n    if (!config) {\n      return;\n    }\n\n    // filtering for only valid config props\n    for (const prop in config) {\n      if (!config.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      if (!defaultComponentConfig.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      // @ts-ignore\n      this[prop] = config[prop];\n    }\n  }\n\n  /**\n   * Life cycle\n   */\n\n  ngOnInit(): void {\n    // defining the state\n    this.state.isInitialFocusFieldEnabled = !this.isEmpty(this.initialFocusField);\n    // initiating the code\n    this.onCodeLengthChanges();\n  }\n\n  ngAfterViewInit(): void {\n    // initiation of the inputs\n    this.inputsListSubscription = this.inputsList.changes.subscribe(this.onInputsListChanges.bind(this));\n    this.onInputsListChanges(this.inputsList);\n  }\n\n  ngAfterViewChecked(): void {\n    this.focusOnInputAfterAppearing();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.code) {\n      this.onInputCodeChanges();\n    }\n    if (changes.codeLength) {\n      this.onCodeLengthChanges();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.inputsListSubscription) {\n      this.inputsListSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Methods\n   */\n\n  reset(isChangesEmitting = false): void {\n    // resetting the code to its initial value or to an empty value\n    this.onInputCodeChanges();\n\n    if (this.state.isInitialFocusFieldEnabled) {\n      // tslint:disable-next-line:no-non-null-assertion\n      this.focusOnField(this.initialFocusField!);\n    }\n\n    if (isChangesEmitting) {\n      this.emitChanges();\n    }\n  }\n\n  focusOnField(index: number): void {\n    if (index >= this._codeLength) {\n      throw new Error('The index of the focusing input box should be less than the codeLength.');\n    }\n\n    this.inputs[index].focus();\n  }\n\n  onClick(e: any): void {\n    // handle click events only if the the prop is enabled\n    if (!this.isFocusingOnLastByClickIfFilled) {\n      return;\n    }\n\n    const target = e.target;\n    const last = this.inputs[this._codeLength - 1];\n    // already focused\n    if (target === last) {\n      return;\n    }\n\n    // check filling\n    const isFilled = this.getCurrentFilledCode().length >= this._codeLength;\n    if (!isFilled) {\n      return;\n    }\n\n    // focusing on the last input if is filled\n    setTimeout(() => last.focus());\n  }\n\n  onInput(e: any, i: number): void {\n    const target = e.target;\n    const value = e.data || target.value;\n\n    if (this.isEmpty(value)) {\n      return;\n    }\n\n    // only digits are allowed if isCharsCode flag is absent/false\n    if (!this.canInputValue(value)) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.setInputValue(target, null);\n      this.setStateForInput(target, InputState.reset);\n      return;\n    }\n\n    const values = value.toString().trim().split('');\n    for (let j = 0; j < values.length; j++) {\n      const index = j + i;\n      if (index > this._codeLength - 1) {\n        break;\n      }\n\n      this.setInputValue(this.inputs[index], values[j]);\n    }\n    this.emitChanges();\n\n    const next = i + values.length;\n    if (next > this._codeLength - 1) {\n      target.blur();\n      return;\n    }\n\n    this.inputs[next].focus();\n  }\n\n  onPaste(e: ClipboardEvent, i: number): void {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const data = e.clipboardData ? e.clipboardData.getData('text').trim() : undefined;\n\n    if (this.isEmpty(data)) {\n      return;\n    }\n\n    // Convert paste text into iterable\n    // tslint:disable-next-line:no-non-null-assertion\n    const values = data!.split('');\n    let valIndex = 0;\n\n    for (let j = i; j < this.inputs.length; j++) {\n      // The values end is reached. Loop exit\n      if (valIndex === values.length) {\n        break;\n      }\n\n      const input = this.inputs[j];\n      const val = values[valIndex];\n\n      // Cancel the loop when a value cannot be used\n      if (!this.canInputValue(val)) {\n        this.setInputValue(input, null);\n        this.setStateForInput(input, InputState.reset);\n        return;\n      }\n\n      this.setInputValue(input, val.toString());\n      valIndex++;\n    }\n\n    this.inputs[i].blur();\n    this.emitChanges();\n  }\n\n  async onKeydown(e: any, i: number): Promise<void> {\n    const target = e.target;\n    const isTargetEmpty = this.isEmpty(target.value);\n    const prev = i - 1;\n\n    // processing only the backspace and delete key events\n    const isBackspaceKey = await this.isBackspaceKey(e);\n    const isDeleteKey = this.isDeleteKey(e);\n    if (!isBackspaceKey && !isDeleteKey) {\n      return;\n    }\n\n    e.preventDefault();\n\n    this.setInputValue(target, null);\n    if (!isTargetEmpty) {\n      this.emitChanges();\n    }\n\n    // preventing to focusing on the previous field if it does not exist or the delete key has been pressed\n    if (prev < 0 || isDeleteKey) {\n      return;\n    }\n\n    if (isTargetEmpty || this.isPrevFocusableAfterClearing) {\n      this.inputs[prev].focus();\n    }\n  }\n\n  private onInputCodeChanges(): void {\n    if (!this.inputs.length) {\n      return;\n    }\n\n    if (this.isEmpty(this.code)) {\n      this.inputs.forEach((input: HTMLInputElement) => {\n        this.setInputValue(input, null);\n      });\n      return;\n    }\n\n    // tslint:disable-next-line:no-non-null-assertion\n    const chars = this.code!.toString().trim().split('');\n    // checking if all the values are correct\n    let isAllCharsAreAllowed = true;\n    for (const char of chars) {\n      if (!this.canInputValue(char)) {\n        isAllCharsAreAllowed = false;\n        break;\n      }\n    }\n\n    this.inputs.forEach((input: HTMLInputElement, index: number) => {\n      const value = isAllCharsAreAllowed ? chars[index] : null;\n      this.setInputValue(input, value);\n    });\n  }\n\n  private onCodeLengthChanges(): void {\n    if (!this.codeLength) {\n      return;\n    }\n\n    this._codeLength = this.codeLength;\n    if (this._codeLength > this.placeholders.length) {\n      const numbers = Array(this._codeLength - this.placeholders.length).fill(1);\n      this.placeholders.splice(this.placeholders.length - 1, 0, ...numbers);\n    }\n    else if (this._codeLength < this.placeholders.length) {\n      this.placeholders.splice(this._codeLength);\n    }\n  }\n\n  private onInputsListChanges(list: QueryList<ElementRef>): void {\n    if (list.length > this.inputs.length) {\n      const inputsToAdd = list.filter((item, index) => index > this.inputs.length - 1);\n      this.inputs.splice(this.inputs.length, 0, ...inputsToAdd.map(item => item.nativeElement));\n      const states = Array(inputsToAdd.length).fill(InputState.ready);\n      this.inputsStates.splice(this.inputsStates.length, 0, ...states);\n    }\n    else if (list.length < this.inputs.length) {\n      this.inputs.splice(list.length);\n      this.inputsStates.splice(list.length);\n    }\n\n    // filling the inputs after changing of their count\n    this.onInputCodeChanges();\n  }\n\n  private focusOnInputAfterAppearing(): void {\n    if (!this.state.isInitialFocusFieldEnabled) {\n      return;\n    }\n\n    if (this.state.isFocusingAfterAppearingCompleted) {\n      return;\n    }\n\n    // tslint:disable-next-line:no-non-null-assertion\n    this.focusOnField(this.initialFocusField!);\n    // tslint:disable-next-line:no-non-null-assertion\n    this.state.isFocusingAfterAppearingCompleted = document.activeElement === this.inputs[this.initialFocusField!];\n  }\n\n  private emitChanges(): void {\n    setTimeout(() => this.emitCode(), 50);\n  }\n\n  private emitCode(): void {\n    const code = this.getCurrentFilledCode();\n\n    this.codeChanged.emit(code);\n\n    if (code.length >= this._codeLength) {\n      this.codeCompleted.emit(code);\n    }\n  }\n\n  private getCurrentFilledCode(): string {\n    let code = '';\n\n    for (const input of this.inputs) {\n      if (!this.isEmpty(input.value)) {\n        code += input.value;\n      }\n    }\n\n    return code;\n  }\n\n  private isBackspaceKey(e: any): Promise<boolean> {\n    const isBackspace = (e.key && e.key.toLowerCase() === 'backspace') || (e.keyCode && e.keyCode === 8);\n    if (isBackspace) {\n      return Promise.resolve(true);\n    }\n\n    // process only key with placeholder keycode on android devices\n    if (!e.keyCode || e.keyCode !== 229) {\n      return Promise.resolve(false);\n    }\n\n    return new Promise<boolean>((resolve) => {\n      setTimeout(() => {\n        const input = e.target;\n        const isReset = this.getStateForInput(input) === InputState.reset;\n        if (isReset) {\n          this.setStateForInput(input, InputState.ready);\n        }\n        // if backspace key pressed the caret will have position 0 (for single value field)\n        resolve(input.selectionStart === 0 && !isReset);\n      });\n    });\n  }\n\n  private isDeleteKey(e: any): boolean {\n    return (e.key && e.key.toLowerCase() === 'delete') || (e.keyCode && e.keyCode === 46);\n  }\n\n  private setInputValue(input: HTMLInputElement, value: any): void {\n    const isEmpty = this.isEmpty(value);\n    const valueClassCSS = 'has-value';\n    const emptyClassCSS = 'empty';\n    if (isEmpty) {\n      input.value = '';\n      input.classList.remove(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement!.classList.add(emptyClassCSS);\n    }\n    else {\n      input.value = value;\n      input.classList.add(valueClassCSS);\n      // tslint:disable-next-line:no-non-null-assertion\n      input.parentElement!.classList.remove(emptyClassCSS);\n    }\n  }\n\n  private canInputValue(value: any): boolean {\n    if (this.isEmpty(value)) {\n      return false;\n    }\n\n    const isDigitsValue = /^[0-9]+$/.test(value.toString());\n    return isDigitsValue || (this.isCharsCode || this.isNonDigitsCode);\n  }\n\n  private setStateForInput(input: HTMLInputElement, state: InputState): void {\n    const index = this.inputs.indexOf(input);\n    if (index < 0) {\n      return;\n    }\n\n    this.inputsStates[index] = state;\n  }\n\n  private getStateForInput(input: HTMLInputElement): InputState | undefined {\n    const index = this.inputs.indexOf(input);\n    return this.inputsStates[index];\n  }\n\n  private isEmpty(value: any): boolean {\n    return  value === null || value === undefined || !value.toString().length;\n  }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CodeInputComponent } from './code-input.component';\nimport {CommonModule} from '@angular/common';\nimport {CodeInputComponentConfig, CodeInputComponentConfigToken} from './code-input.component.config';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    CodeInputComponent\n  ],\n  exports: [\n    CodeInputComponent\n  ]\n})\nexport class CodeInputModule {\n  static forRoot(config: CodeInputComponentConfig): ModuleWithProviders<CodeInputModule> {\n    return {\n      ngModule: CodeInputModule,\n      providers: [\n        {provide: CodeInputComponentConfigToken, useValue: config }\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of code-input\n */\n\nexport * from './lib/code-input.component';\nexport * from './lib/code-input.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {CodeInputComponentConfig as ɵb,CodeInputComponentConfigToken as ɵa} from './lib/code-input.component.config';"]}